import React from 'react';
import './MemeGenerator.css'
import {Button} from 'reactstrap'
import ReactDOM from 'react-dom';
//import axios from 'axios';//to run on server
import axios from '../../mock-back-end/mockbackend';//to run local


let self;
const apiHost = 'https://g4ninh0.000webhostapp.com';//host to run inside a server.

class MemeGenerator extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        imageCompiledUrl: '', 
        memeHead:'', 
        memeBody:'', 
        memeImageUrl:'', 
        id:null,
        list:[]
      };
      self = this;
  }
  
    compileMeme(){
        var divroot = ReactDOM.findDOMNode(self);
        var canvas = divroot.getElementsByTagName('canvas')[0];
        var context = canvas.getContext("2d");
        var image = new Image();
        image.onload = function(){
            image.width = 150;
            image.height = 80;
            context.clearRect(0, 0, canvas.width, canvas.height);
		        canvas.width = image.width;
		        canvas.height = image.height;
		        context.drawImage(image, 0, 0, image.width, image.height);


            context.lineWidth=1;
            context.fillStyle='#FFFFFF';
            context.lineStyle='#FFFFFF';
            context.font="18px sans-serif";
            context.fillText(self.state.memeHead, 10, 20);
            context.fillText(self.state.memeBody, 10, 70);

            canvas = divroot.getElementsByTagName('canvas')[0];
            self.state.imageCompiledUrl=canvas.toDataURL();
            self.setState(self.state);
            
        };
        image.crossOrigin = "Anonymous";
        image.src = this.state.memeImageUrl;
        
        this.setState(this.state);
   
    }

    updateHead(e){
      self.state.memeHead = e.target.value;
      self.compileMeme();
    }

    updateBody(e){
      self.state.memeBody = e.target.value;
      self.compileMeme();
    }
  
    updateImageUrl(e){
      self.state.memeImageUrl = e.target.value;
      self.compileMeme();
    }

    getCastImagePayload(){
      return {'image': self.state.imageCompiledUrl};
    }

    castImage(successFunction){
      
      const body = self.getCastImagePayload();
      axios.post(apiHost.concat('/storeimage.php'),body)
        .then((response)=>{
      
            self.state.imageCompiledUrl = response.data.image;
            self.setState(self.state);
            successFunction();
        }).catch((response)=>{
            console.log(response);
        });
    }

    getPersistMemePayload(){
      return {
        'imageCompiledUrl': self.state.imageCompiledUrl, 
        'memeHead':self.state.memeHead, 
        'memeBody':self.state.memeBody, 
        'memeImageUrl':self.state.memeImageUrl,
        'id':self.state.id
      };
    }

    getPersistMemeUrl(){
      if(self.state.id!=null){
        return apiHost.concat('/api.php?entity=memes&id='+self.state.id);
      }else{
        return apiHost.concat('/api.php?entity=memes&id=');
      }
    }

    /**
     * Fake persistence, just on UI to be able to edit latter but no if press f5 :)
     */
    persistMeme(){
      const body = self.getPersistMemePayload();
      const update = self.state.id!=='' && self.state.id!==null;
      /*axios.post(self.getPersistMemeUrl(),body)
      .then((response)=>{
          self.state.id = response.data;
          self.state.list.push(self.state);
          self.setState(self.state);
      }).catch((response)=>{
          console.log(response);
      });*/
      self.state.id = new Date().getTime();
      self.state.list.push(self.state);
      self.setState(self.state);
    }
    
    getLinkedInPayload(){
      return {
        'comment': 'Comment title '+ new Date().getTime(),
        'content': {
          'title': "Generated by Meme Generator",
          "description": "POC to publish a meme on linkedin",
          "submitted-url": self.state.memeImageUrl,  
          "submitted-image-url": apiHost.concat(self.state.imageCompiledUrl)
        },
        'visibility': {
            'code': 'anyone'
          }
        };
    }

    editMeme(id){
      let currModel = self.getElement(id);
      
      self.state.id = currModel.id;
      self.state.memeBody = currModel.memeBody;
      self.state.memeHead = currModel.memeHead;
      self.state.memeImageUrl = currModel.memeImageUrl;
      self.state.imageCompiledUrl = currModel.imageCompiledUrl;
      self.compileMeme();
      
    }

    getElement(id){
      if(self.state.list!=null){
        for(let i=0; self.state.list.length;i++){
          let current = self.state.list[i];
          if(current.id===id){
            return current;
          }
        }
      }
      return null;
    }

    post(){
      
      axios.post(apiHost.concat('/proxy.php'),self.getLinkedInPayload())
        .then((response)=>{
            
            self.state.postlink = response.data.updateUrl;
            self.setState(self.state);
        }).catch((response)=>{
            console.log(response);
        });
    }

    postOnLinkedin(){
        self.persistMeme();
        self.castImage(()=>self.post());
        
    }

    getDivItem(current){
      return <div className="table-cell" key={current.key} id={current.id} onClick={(e)=>self.editMeme(current.id)}><img alt={current.memeHead} src={current.imageCompiledUrl}></img></div>
    }

    getSeeYourPostLink(){
      if(this.state.postlink){
        return <a href={this.state.postlink} target="_blank">See your post</a>
      }else{
        return '';
      }
    }

    getResultItems(){
      let resultItems = [];
      for(let i=0; i<this.state.list.length; i++){
        let current = this.state.list[i];
        current.key = i;
        resultItems.push(self.getDivItem(current))
      }
      return resultItems;
    }

    getNoImageText(){
      return this.state.memeImageUrl===''?'No Image':'';
    }

    getBtnPublish(){
      return this.state.memeImageUrl===''?'':<Button color="danger" onClick={this.postOnLinkedin}>Publish</Button>;
    }
    /**
     * There is no logic inside this methor. Just call the external methods to compose a decision.
     */
    render() {
      let seeYourPost = this.getSeeYourPostLink();
      let resultItems = this.getResultItems();

      let noImageText = this.getNoImageText();
      let btnPublish = this.getBtnPublish();
      return (
        <div className="meme-gen-root">
          <div className="meme-gen-edit">
          <div className="meme-image-place">
              
            <div className="meme-gen-img-preview">
              {noImageText}
              <canvas></canvas>
            </div>
          
          </div>
          <div className="meme-fields-place">
            <input type="text" value={this.state.memeUrl} onChange={(e)=>this.updateImageUrl(e)} placeholder="https://...Meme Image Url"/>  
            <input type="text" value={this.state.memeHead} onChange={(e)=>this.updateHead(e)} placeholder="Meme Heading"/>
            <input type="text" value={this.state.memeBody} placeholder="Meme Subheading" onChange={(e)=>this.updateBody(e)}/>
            {btnPublish}
            {seeYourPost}
          </div>

          </div>
        <div className="table-row container">
            {resultItems}
        </div>
        </div>
      )
    }
  }
    
  export default MemeGenerator;